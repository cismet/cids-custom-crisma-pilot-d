/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.crisma.pilotD.model;

import org.jdesktop.beansbinding.Converter;

import org.openide.util.NbBundle;

import javax.swing.JSpinner;

import de.cismet.cids.custom.crisma.pilotD.model.AreaEditorVisualPanel.Conv;
import de.cismet.cids.custom.crisma.pilotD.model.AreaEditorWizardPanel.Area;
import de.cismet.cids.custom.crisma.pilotD.model.AreaEditorWizardPanel.AreaEditor;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class BuildingEditor extends AreaEditor {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form BuildingEditor.
     */
    public BuildingEditor() {
        initComponents();
        jSpinner1.setEditor(new JSpinner.NumberEditor(jSpinner1, "+0'%';-0'%'"));
    }

    //~ Methods ----------------------------------------------------------------

    @Override
    public void setArea(final Area a) {
        super.setArea(a);

        bindingGroup.unbind();
        bindingGroup.bind();
    }

    @Override
    public Area getArea() {
        return super.getArea(); // To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSlider1 = new javax.swing.JSlider();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(NbBundle.getMessage(BuildingEditor.class, "BuildingEditor.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabel1, gridBagConstraints);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${area.name}"),
                jTextField1,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jTextField1, gridBagConstraints);

        jLabel2.setText(NbBundle.getMessage(BuildingEditor.class, "BuildingEditor.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabel2, gridBagConstraints);

        jSpinner1.setPreferredSize(new java.awt.Dimension(68, 28));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${area.value}"),
                jSpinner1,
                org.jdesktop.beansbinding.BeanProperty.create("value"),
                "val");
        binding.setSourceNullValue(0);
        binding.setConverter(new VConv());
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jSpinner1, gridBagConstraints);

        jSlider1.setMaximum(200);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                jSpinner1,
                org.jdesktop.beansbinding.ELProperty.create("${value}"),
                jSlider1,
                org.jdesktop.beansbinding.BeanProperty.create("value"),
                "");
        binding.setConverter(new Conv());
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jSlider1, gridBagConstraints);

        bindingGroup.bind();
    } // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private static final class VConv extends Converter<Object, Object> {

        //~ Methods ------------------------------------------------------------

        @Override
        public Object convertForward(final Object value) {
            if (value == null) {
                return 0;
            } else {
                return Integer.valueOf(value.toString());
            }
        }

        @Override
        public Object convertReverse(final Object value) {
            if (value == null) {
                return 0;
            } else {
                return Integer.valueOf(value.toString());
            }
        }
    }
}
