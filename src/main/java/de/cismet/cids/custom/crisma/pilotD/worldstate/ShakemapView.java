/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.crisma.pilotD.worldstate;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.vividsolutions.jts.geom.Geometry;

import edu.umd.cs.piccolo.event.PBasicInputEventHandler;
import edu.umd.cs.piccolo.event.PInputEvent;

import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;

import java.io.IOException;

import java.util.Map;

import javax.swing.JComponent;
import javax.swing.JPanel;

import de.cismet.cids.custom.crisma.worldstate.viewer.AbstractDetailView;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.cismap.commons.Crs;
import de.cismet.cismap.commons.CrsTransformer;
import de.cismet.cismap.commons.XBoundingBox;
import de.cismet.cismap.commons.gui.MappingComponent;
import de.cismet.cismap.commons.gui.layerwidget.ActiveLayerModel;
import de.cismet.cismap.commons.gui.piccolo.eventlistener.BackgroundRefreshingPanEventListener;
import de.cismet.cismap.commons.gui.piccolo.eventlistener.RubberBandZoomListener;
import de.cismet.cismap.commons.raster.wms.simple.SimpleWMS;
import de.cismet.cismap.commons.raster.wms.simple.SimpleWmsGetMapUrl;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class ShakemapView extends AbstractDetailView {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = LoggerFactory.getLogger(ShakemapMiniatureView.class);

    //~ Instance fields --------------------------------------------------------

    private final transient ShakemapMiniatureView miniatureView = new ShakemapMiniatureView();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private de.cismet.cismap.commons.gui.MappingComponent mappingComponent1;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form ShakemapView.
     */
    public ShakemapView() {
        initComponents();

        final JPanel p = new JPanel() {

                final Image i = ImageUtilities.loadImage(ShakemapView.class.getPackage().getName().replaceAll(
                            "\\.",
                            "/") + "/legend.png");

                @Override
                protected void paintComponent(final Graphics g) {
                    g.drawImage(i, 0, 0, this);
                    g.dispose();
                }
            };

        final Dimension d = new Dimension(253, 240);
        p.setMaximumSize(d);
        p.setMinimumSize(d);
        p.setSize(d);
        p.setPreferredSize(d);
        jPanel2.add(p, BorderLayout.CENTER);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        mappingComponent1 = new de.cismet.cismap.commons.gui.MappingComponent();
        jPanel2 = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 153, 153)));
        jPanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        jPanel1.add(mappingComponent1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(
                NbBundle.getMessage(ShakemapView.class, "ShakemapView.jPanel2.border.title"))); // NOI18N
        jPanel2.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanel1.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(jPanel1, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    @Override
    public JComponent getView() {
        return this;
    }

    @Override
    public JComponent getMiniatureView() {
        return miniatureView;
    }

    @Override
    public String getId() {
        return "shakemaps_detailview";
    }

    @Override
    public String getDisplayName() {
        return "Shakemaps";
    }

    @Override
    public void setWorldstate(final CidsBean worldstate) {
        super.setWorldstate(worldstate);

        miniatureView.setWorldstate(worldstate);

        init();
    }

    /**
     * DOCUMENT ME!
     */
    private void init() {
        try {
            initPilotDMap(mappingComponent1, "shakemap", getWorldstate(), 0.7f, new WFSRequestListener());
        } catch (final Exception e) {
            LOG.error("cannot initialise shakemap miniature view", e);
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param   mappingComponent1  DOCUMENT ME!
     * @param   dataitem           DOCUMENT ME!
     * @param   worldstate         DOCUMENT ME!
     * @param   translucency       DOCUMENT ME!
     * @param   listener           DOCUMENT ME!
     *
     * @throws  IOException            DOCUMENT ME!
     * @throws  IllegalStateException  DOCUMENT ME!
     */
    public static void initPilotDMap(final MappingComponent mappingComponent1,
            final String dataitem,
            final CidsBean worldstate,
            final float translucency,
            final PBasicInputEventHandler listener) throws IOException {
        for (final CidsBean b : worldstate.getBeanCollectionProperty("worldstatedata")) {
            if (dataitem.equals(b.getProperty("name"))) {
                final Geometry g = (Geometry)b.getProperty("spatialcoverage.geo_field");
                g.setSRID(4326);
                final Geometry gt = CrsTransformer.transformToGivenCrs(g, "EPSG:32633");
                final XBoundingBox bbox = new XBoundingBox(gt);
                final ActiveLayerModel mappingModel = new ActiveLayerModel();
                mappingModel.setSrs(new Crs("EPSG:32633", "EPSG:32633", "EPSG:32633", true, true));
                mappingModel.addHome(bbox);

                final ObjectMapper m = new ObjectMapper(new JsonFactory());
                final TypeReference<Map<String, String>> ref = new TypeReference<Map<String, String>>() {
                    };

                final String jsonString = (String)b.getProperty("actualaccessinfo");
                final Map<String, String> json = m.readValue(jsonString, ref);
                final SimpleWMS layer = new SimpleWMS(new SimpleWmsGetMapUrl(
                            "http://crisma.cismet.de/geoserver/crisma/wms?service=WMS&version=1.1.0&request=GetMap&layers="
                                    + json.get("layername")
                                    + "&bbox=<cismap:boundingBox>&width=<cismap:width>&height=<cismap:height>&srs=EPSG:32633&format=image/png"));
                final SimpleWMS ortho = getOrthoLayer(worldstate);
                if (ortho != null) {
                    mappingModel.addLayer(ortho);
                    layer.setTranslucency(translucency);
                }
                mappingModel.addLayer(layer);

                mappingComponent1.setMappingModel(mappingModel);
                mappingComponent1.addInputListener("wfsclick", listener);
                mappingComponent1.setInteractionMode("wfsclick");
                mappingComponent1.unlock();
                mappingComponent1.gotoInitialBoundingBox();

                return;
            }
        }

        throw new IllegalStateException("no shakemap dataitem present: " + worldstate);
    }

    /**
     * DOCUMENT ME!
     *
     * @param   worldstate  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     *
     * @throws  IOException  DOCUMENT ME!
     */
    public static SimpleWMS getOrthoLayer(final CidsBean worldstate) throws IOException {
        for (final CidsBean be : worldstate.getBeanCollectionProperty("worldstatedata")) {
            if ("ortho".equals(be.getProperty("name"))) {
                final ObjectMapper m = new ObjectMapper(new JsonFactory());
                final TypeReference<Map<String, String>> ref = new TypeReference<Map<String, String>>() {
                    };

                final String jsonString = (String)be.getProperty("actualaccessinfo");
                final Map<String, String> json = m.readValue(jsonString, ref);

                final SimpleWMS layer = new SimpleWMS(new SimpleWmsGetMapUrl(
                            "http://geoportale2.regione.abruzzo.it/erdas-iws/ogc/wms/?&VERSION=1.1.1&REQUEST=GetMap&BBOX=<cismap:boundingBox>&WIDTH=<cismap:width>&HEIGHT=<cismap:height>&SRS=EPSG:32633&FORMAT=image/png&TRANSPARENT=TRUE&BGCOLOR=0xF0F0F0&EXCEPTIONS=application/vnd.ogc.se_xml&LAYERS="
                                    + json.get("layername")));
                layer.setTranslucency(1f);

                return layer;
            }
        }

        return null;
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    public static final class WFSRequestListener extends BackgroundRefreshingPanEventListener {

        //~ Instance fields ----------------------------------------------------

        private final RubberBandZoomListener zoomDelegate;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new PanAndMousewheelZoomListener object.
         */
        public WFSRequestListener() {
            zoomDelegate = new RubberBandZoomListener();
        }

        //~ Methods ------------------------------------------------------------

        @Override
        public void mouseWheelRotated(final PInputEvent pInputEvent) {
            zoomDelegate.mouseWheelRotated(pInputEvent);
        }

        @Override
        public void mouseClicked(final PInputEvent event) {
            final MappingComponent mc = (MappingComponent)event.getComponent();
            final double xCoord = mc.getWtst().getSourceX(event.getPosition().getX() - mc.getClip_offset_x());
            final double yCoord = mc.getWtst().getSourceY(event.getPosition().getY() - mc.getClip_offset_y());
            LOG.error("clicked: [x=" + xCoord + "|y=" + yCoord + "]");
        }
    }
}
